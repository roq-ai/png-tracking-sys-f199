generator client {
  provider = "prisma-client-js"
  previewFeatures = ["clientExtensions", "postgresqlExtensions"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  extensions      = [pgcrypto]
}

model analyst {
  id                 String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  user_id            String?  @db.Uuid
  joined_date        DateTime @db.Timestamp(6)
  status             String   @db.VarChar(255)
  analysis_performed String?  @db.VarChar(255)
  report_generated   String?  @db.VarChar(255)
  created_at         DateTime @default(now()) @db.Timestamp(6)
  updated_at         DateTime @default(now()) @db.Timestamp(6)
  user               user?    @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "fk_analyst_user")
}

model guest {
  id                  String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  user_id             String?  @db.Uuid
  visited_date        DateTime @db.Timestamp(6)
  status              String   @db.VarChar(255)
  organization_viewed String?  @db.VarChar(255)
  feedback_given      String?  @db.VarChar(255)
  created_at          DateTime @default(now()) @db.Timestamp(6)
  updated_at          DateTime @default(now()) @db.Timestamp(6)
  user                user?    @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "fk_guest_user")
}

model manager {
  id            String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  user_id       String?  @db.Uuid
  joined_date   DateTime @db.Timestamp(6)
  status        String   @db.VarChar(255)
  team_managed  String?  @db.VarChar(255)
  task_overseen String?  @db.VarChar(255)
  created_at    DateTime @default(now()) @db.Timestamp(6)
  updated_at    DateTime @default(now()) @db.Timestamp(6)
  user          user?    @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "fk_manager_user")
}

model organization {
  id           String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  description  String?   @db.VarChar(255)
  date_created DateTime? @db.Timestamp(6)
  last_updated DateTime? @db.Timestamp(6)
  name         String    @db.VarChar(255)
  created_at   DateTime  @default(now()) @db.Timestamp(6)
  updated_at   DateTime  @default(now()) @db.Timestamp(6)
  user_id      String    @db.Uuid
  tenant_id    String    @db.VarChar(255)
  user         user      @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_organization_user")
}

model team_member {
  id             String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  user_id        String?  @db.Uuid
  joined_date    DateTime @db.Timestamp(6)
  status         String   @db.VarChar(255)
  task_assigned  String?  @db.VarChar(255)
  task_completed String?  @db.VarChar(255)
  created_at     DateTime @default(now()) @db.Timestamp(6)
  updated_at     DateTime @default(now()) @db.Timestamp(6)
  user           user?    @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "fk_team_member_user")
}

model user {
  id           String         @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  email        String         @unique @db.VarChar(255)
  firstName    String?        @db.VarChar(255)
  lastName     String?        @db.VarChar(255)
  roq_user_id  String         @db.VarChar(255)
  tenant_id    String         @db.VarChar(255)
  created_at   DateTime       @default(now()) @db.Timestamp(6)
  updated_at   DateTime       @default(now()) @db.Timestamp(6)
  analyst      analyst[]
  guest        guest[]
  manager      manager[]
  organization organization[]
  team_member  team_member[]
}
